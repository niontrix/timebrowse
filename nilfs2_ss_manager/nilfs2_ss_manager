#!/usr/bin/env python
#
#  copyright(c) 2011 - Jiro SEKIBA <jir@unicus.jp>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

"""nilfs snapshot manager"""

__author__    = "Jiro SEKIBA"
__copyright__ = "Copyright (c) 2011 - Jiro SEKIBA <jir@unicus.jp>"
__license__   = "GPL2"
__version__   = "0.5"

import nilfs2
import yaml
import time
import os
import stat
import re
import sys
import argparse
import gobject
import daemon
import daemon.pidlockfile
import commands
import syslog
import signal

log_priorities = [ 'emerg', 'alert', 'crit', 'err', 'warning', 'notice',
                   'info', 'debug' ]

def parse_log_priority(name):
    return log_priorities.index(name) if name in log_priorities else -1

class Logger:
    "A simple logger class which can redirect the output"
    def __init__(self, indent=False,
                 priomask=syslog.LOG_UPTO(syslog.LOG_INFO)):
        if indent:
            self.__indent__ = indent
            self.out = self.syslog_out
        else:
            self.out = self.stderr_out
        self.setlogmask(priomask)

    def setlogmask(self, priomask):
        self.priomask = priomask
        syslog.setlogmask(priomask)

    def syslog_out(self, prio, string):
        "Write a given string to syslog"
        syslog.openlog(self.__indent__)
        syslog.syslog(prio, string)
        syslog.closelog()

    def stderr_out(self, prio, string):
        "Print a given string to the standard error output"
        if (syslog.LOG_MASK(prio) & self.priomask):
            print >> sys.stderr, string

class NILFSConfigurationException(Exception):
    def __init__(self, errors):
        self.errors = errors

class VersionException(Exception):
    def __init__(self):
        self.version = ["NILFS snapshot manager v" + __version__,
                        __copyright__]

def match_fs(path, fsnames):
    """
    Get the name of filesystem used on @path and return True if the
    filesystem name matches one of names in @fsnames.
    """
    cmd = 'stat -fc %T ' + path
    result = commands.getstatusoutput(cmd)
    return result[0] == 0 and (result[1] in fsnames)

class NILFSSSManager:
    def __init__(self, nilfs, mp, logger, **options):
        self.ns = nilfs
        self.mp = os.path.realpath(mp)
        self.logger = logger
        self.aborting = False
        self.passive = 'passive' in options and options['passive']
        self.interval = options['interval']
        self.threshold = options['threshold']
        self.protection_period = options['protection_period']
        self.protection_max = options['protection_max']
        self.cps = self.ns.lscp()

    def __join_cp_list__(self, l, last):
        # Here, we suppose coinstantaneous checkpoints were shrunk both from
        # l and self.cps.

        # Remove the last checkpoint from self.cps if it has the same
        # timestamp with the head checkpoint of l.
        if l and l[0]['date'] == last['date']:
            if last['ss']:
                # l[0] may be a snapshot, but we select the previous
                # snapshot because it may be busy.
                del l[0]
            else:
                del self.cps[-1]
        self.cps += l

    def __refresh_cp_cache__(self, l):
        """
        Update state of checkpoint information in lscp cache to
        reflect manual snapshot operations
        """
        for cp in self.cps[:]:
            # Skip checkpoints
            while l and cp['cno'] > l[0]['cno']:
                del l[0]
            if cp['ss']:
                pass  # Do not update snapshot
            else:
                if not l or cp['cno'] < l[0]['cno']:
                    # The plain checkpoint was deleted
                    self.cps.remove(cp)
                else:  # cp['cno'] == l[0]['cno']
                    if l[0]['ss']:
                        # A new snapshot found
                        cp['ss'] = True

        if not self.cps:  # if cp cache became empty
            self.cps = l
        else:
            last = self.cps[-1]
            while l and l[0]['cno'] <= last['cno']:
                del l[0]
            self.__join_cp_list__(l, last)

    def lscp(self, refresh=False):
        if refresh:
            idx = self.cps[0]['cno']
            cps = self.ns.lscp(index=idx)
            self.__refresh_cp_cache__(cps)
        else:
            last = self.cps[-1]
            idx = last['cno'] + 1
            cps = self.ns.lscp(index=idx)
            self.__join_cp_list__(cps, last)
           
        cps = self.cps[:] 
        cps.reverse()
        return cps

    def snapshot_mount_point(self, cp):
        return self.mp + '/' + time.strftime("%Y.%m.%d-%H.%M.%S", cp['date'])

    def snapshot_is_mounted(self, cp):
        "Return if the specified checkpoint is mounted or not"
        path = self.snapshot_mount_point(cp)
        return os.path.ismount(path)
                                       # TODO: should also test device

    def do_mount_ss(self, refresh):
        "Create mount points for existing snapshots and mount them."
        for cp in self.lscp(refresh):
            if self.aborting:
                break
            if cp['ss']:
                if refresh and self.snapshot_is_mounted(cp):
                    continue  # skip if the snapshot is mounted
                self.do_mount(cp)

    def mount_ss(self):
        """
        Create mount points for existing snapshots and mount them.  If
        the mount point is on a nilfs filesystem, this will create a
        tmpfs on it so that making mount point directories does not
        trigger further checkpoint creation.
        Before mounting snapshots, thin out snapshots based on
        the sparse parameters if not passive mode.
        """
        if match_fs(self.mp, ['nilfs', 'nilfs2']):
            self.mount_tmpfs()
        if not self.passive:
            self.thin_out_snapshots()
        self.do_mount_ss(False)

    def create_dir(self, path):
        "Check if @path is present, and make the directory if not."
        if os.path.exists(path):
            if not os.path.isdir(path):
                 info = "path is not directory: %s" % path
                 self.logger.out(syslog.LOG_CRIT, info)
                 raise Exception(info)
        else:
            os.mkdir(path)

    def do_unmount(self, mounts=[], failed=[]):
        "Unmount all snapshots and remove their mount point directories"
        busy = []
        for cp in mounts:
            mp = cp['mp']
            if not os.path.ismount(mp):
                self.logger.out(syslog.LOG_INFO, "%s not mounted" % mp)
                continue  # ignore already unmounted mountpoints
            cmd = 'umount -n %s' % mp
            result = commands.getstatusoutput(cmd)
            if result[0] == 0:
                cp['ss'] = False
                os.rmdir(mp)
                self.logger.out(syslog.LOG_INFO, "unmounted %s" % mp)
            elif result[0] == 256:
                self.logger.out(syslog.LOG_INFO,
                                "failed to unmount %s (busy)" % mp)
                busy.append(cp)
            else:
                self.logger.out(syslog.LOG_WARNING,
                                "failed to unmount %s (status=%d)" %
                                (mp, result[0]))
                failed.append(cp)
        return busy

    def unmount_all(self, mounts):
        "Unmount all snapshots and retry it a few times for busy snapshots."
        failed = []
        busy = self.do_unmount(mounts, failed)

        retrycount = 2
        interval = 1
        while busy and retrycount > 0:
            self.logger.out(syslog.LOG_INFO,
                            "Retrying unmount (wait=%ds)" % interval)
            time.sleep(interval)
            busy = self.do_unmount(busy, failed)
            interval <<= 1
            retrycount -= 1

        if match_fs(self.mp, ['tmpfs']):
            self.unmount_tmpfs()

    def do_mount(self, cp):
        """
        Create a sub-directory with a name based on timestamp @t and
        mount a snapshot given by the checkpoint information @cp on
        the directory.  On success, the sub-directory name will be
        appended as cp['mp'].
        """
        target = self.snapshot_mount_point(cp)
        cmd = "mount -t nilfs2 -n -o ro,cp=%d" % cp['cno']
        cmd += " " + self.ns.device + " " + target
        self.create_dir(target)
        result = commands.getstatusoutput(cmd)
        if result[0] != 0:
            self.logger.out(syslog.LOG_CRIT, result[1])
            raise Exception(result[1])
        cp['mp'] = target
        self.logger.out(syslog.LOG_INFO,
                        "mount ss = %d on %s" % (cp['cno'],target))

    def create_ss(self):
        """
        Get a list of recently created checkpoints, change them into
        snapshots, and mount them.
        """
        if self.aborting or self.passive: return
        for cp in self.lscp():
            if self.aborting:
                break
            if cp['ss']:
                break
            self.logger.out(syslog.LOG_INFO,
                            "create snapshot: ss = %d" % cp['cno'])
            self.ns.chcp(cp['cno'], True)
            cp['ss'] = True
            self.do_mount(cp)

    def __find_landmarks__(self):
        "find snapshots to be cut out and to be saved."
        now = time.time()
        old_list = [cp for cp in self.cps 
                    if (now - time.mktime(cp['date'])) > self.protection_max and
                       cp['ss']]
        cps = [cp for cp in self.cps 
               if (now - time.mktime(cp['date'])) < self.protection_max and
                  (now - time.mktime(cp['date'])) > self.protection_period and
                  cp['ss']]
        if len(cps) == 0:
            return [], [] 
        
        prev = cps.pop(0)
        prev_mtime = time.mktime(prev['date'])
        group_start_mtime = prev_mtime
      
        landmarks = []
        targets = []
        for cp in cps:
            mtime = time.mktime(cp['date'])
            if ((mtime - prev_mtime) > self.interval or 
                (mtime - group_start_mtime) > self.threshold):
                landmarks.append(prev)
                group_start_mtime = mtime
            else:
                targets.append(prev)
            
            prev = cp
            prev_mtime = time.mktime(cp['date'])
        landmarks.append(cps[-1])
                
        return landmarks, old_list + targets

    def thin_out_snapshots(self):
        "thin out snapshots based on sparse parameters"
        landmarks, targets = self.__find_landmarks__()
        mounts = []
        for cp in targets:
            if self.snapshot_is_mounted(cp):
                mounts.append(cp)
            else:
                self.ns.chcp(cp['cno'])
                cp['ss'] = False

        busy = self.do_unmount(mounts)
        for cp in mounts:
            if not cp['ss']:
                self.ns.chcp(cp['cno'])

    def mount_tmpfs(self):
        "Create a tmpfs mount on @self.mp"
        cmd = 'mount -t tmpfs none ' + self.mp
        commands.getstatusoutput(cmd)

    def unmount_tmpfs(self):
        "Unmount the tmpfs mount on @self.mp"
        cmd = 'umount -t tmpfs ' + self.mp
        commands.getstatusoutput(cmd)

    def scan_mounts(self):
        "scan mountpoints from /proc/mounts"
        regex = re.compile(
            '^ *([^ ]+) +(' + self.mp +
            '/[^ ]+) +nilfs2 +[^ ]*cp=[\d]+[^ ]* +[^ ]+ +[^ ]+ *$', re.M)
        mounts = []
        with open("/proc/mounts") as f:
            mounts = [m[1] for m in regex.findall(f.read())]
        return mounts

    def shutdown(self):
        """
        Set @self.aborting which shows if the daemon is an aborting phase,
        and unmount all snapshots.
        """
        self.aborting = True
        cps = [ cp for cp in self.cps
                if cp['ss'] == True and cp.has_key('mp') ]
        self.unmount_all(cps)

    def update(self):
        """
        Thin out the old snapshots if not passive, then
        check the new snapshots and mount them if exists.
        """
        if self.passive:
            self.do_mount_ss(True)
        else:
            self.thin_out_snapshots()
            self.create_ss()

    def clean(self):
        """
        Retrieve a list of snapshot mounts from /proc/mounts and
        unmount them all.
        """
        mounts = [ {'mp' : mp } for mp in self.scan_mounts()]
        self.unmount_all(mounts)

def do_loop(interval, ss_managers):
    """
    Callback function to trigger snapshot managers.  This function is called
    periodically at intervals of the given @interval.
    """
    for manager in ss_managers:
        manager.update()
    gobject.timeout_add(interval, do_loop, interval, ss_managers)

class NODaemonContext:
    "Dummy daemon context class"
    def __init__(self):
        pass

    def __enter__(self):
        pass

    def __exit__(self, *excinfo):
        pass

def register_sighandlers(managers, mainloop):
    "Register signal handlers"
    def do_exit(a,b):
        for m in managers:
            m.shutdown()
        mainloop.quit()
    def do_update(a,b):
        for m in managers:
            m.update()
    signal.signal(signal.SIGINT, do_exit)
    signal.signal(signal.SIGTERM, do_exit)
    signal.signal(signal.SIGUSR1, do_update)

def check_configuration(conf):
    "Check if the configuration is valid"
    errors = []
    for key in ['devices', 'period', 'pidfile']:
        if not key in conf:
            errors.append("No '%s' key defined" % key)
        elif not conf[key]:
            errors.append("'%s' key has no value" % key)

    # set default sparse parameters if not configured
    if not 'landmark_interval' in conf:
        conf['landmark_interval'] = 60

    if not 'landmark_threshold' in conf:
        conf['landmark_threshold'] = 600

    if not 'protection_period' in conf:
        conf['protection_period'] = 3600

    if not 'protection_max' in conf:
        conf['protection_max'] = 60*60*24*365

    # Check log priority
    if 'log_priority' in conf:
        if parse_log_priority(conf['log_priority']) < 0:
            errors.append("unknown log priority: " + conf['log_priority'])
    else:
        conf['log_priority'] = 'notice'

    if len(errors) > 0:
        raise NILFSConfigurationException(errors)

try:
    logger = Logger()

    # Parse command line options
    parser = argparse.ArgumentParser(description="NILFS2 snapshot manager")
    parser.add_argument("-f", "--conf", dest='conffile',
                        default = '/etc/nilfs_ss.conf',
                        metavar = 'config',
                        help = 'config file')
    parser.add_argument("-p", "--pidfile", dest='pidfile',
                        metavar = 'pid-file',
                        help = 'pid file')
    parser.add_argument("-C", "--clean", dest='clean', action='store_const',
                        default = False, const = True,
                        help = 'manually unmount all snapshots')
    parser.add_argument("-D", dest='daemonize', action='store_const',
                        default = True, const = False, 
                        help = 'do not daemonize')
    parser.add_argument("-P", "--passive", dest='passive',
                        action='store_const', default = False, const = True,
                        help = 'do not snapshot automatically (passive mode)')
    parser.add_argument("-V", "--version", dest='show_version',
                        action='store_const', default = False, const = True,
                        help = 'show version and exit')

    args = parser.parse_args()
    if args.show_version:
        raise VersionException()

    conffile = args.conffile
    daemonize = args.daemonize and not args.clean

    # Read configuration file written in YAML format.
    conf = yaml.safe_load(open(conffile))
    check_configuration(conf)

    # Set log priority
    priomask = syslog.LOG_UPTO(parse_log_priority(conf['log_priority']))
    logger.setlogmask(priomask)

    devices = conf['devices']
    period = conf['period']

    daemon_options = { 'passive': args.passive, 
                       'interval': conf['landmark_interval'],
                       'threshold': conf['landmark_threshold'],
                       'protection_period': conf['protection_period'],
                       'protection_max': conf['protection_max']}

    # Set up a daemon context. If no daemonize option is specfied, a
    # dummy context (NODaemonContext) will be used.
    dc = NODaemonContext()
    if daemonize:
        pidfile = args.pidfile if args.pidfile else conf['pidfile']
        dc = daemon.DaemonContext(
                    pidfile=daemon.pidlockfile.PIDLockFile(pidfile))
        logger = Logger(sys.argv[0], priomask=priomask)

    # Create snapshot managers for every device and mountpoint written
    # in conffile.
    managers = [NILFSSSManager(nilfs2.NILFS2(device), devices[device], logger,
                               **daemon_options)
                for device in devices]
 
    if args.clean:
        # Do cleanup job for every nilfs device if "clean" option is
        # specified.
        for manager in managers:
            manager.clean()
    else:
        # Initialize signal handlers and the timer to call back the
        # do_loop function periodically, and then kick every snapshot
        # manager.
        with dc:
            interval = period * 1000
            gobject.timeout_add(interval, do_loop, interval, managers)
            mainloop = gobject.MainLoop()
            register_sighandlers(managers, mainloop)
            for manager in managers:
                manager.mount_ss()
            mainloop.run()

except VersionException, e:
    for version in e.version:
        logger.out(syslog.LOG_INFO, version)

except NILFSConfigurationException, e:
    # Handle conffile errors
    logger.out(syslog.LOG_ERR, "Configuration error in %s" % conffile)
    for error in e.errors:
        logger.out(syslog.LOG_ERR, "  " + error),

except yaml.YAMLError, e:
    # Handle YAML errors
    pos = None
    if (hasattr(e, 'problem') and hasattr(e, 'context_mark') and
        hasattr(e, 'problem_mark')):
        if e.problem_mark is not None:
            pos = (e.problem_mark.line + 1, e.problem_mark.column + 1)
        elif e.context_mark is not None:
            pos = (e.context_mark.line + 1, e.context_mark.column + 1)

    logger.out(syslog.LOG_ERR, "Error" +
               (" near line %s, column %s" % pos if pos else "") +
               " while loading " + conffile)
    if hasattr(e, 'problem') and (e.problem is not None):
        logger.out(syslog.LOG_ERR, "  Reason: %s" % e.problem)
